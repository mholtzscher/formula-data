// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	dal "github.com/mholtzscher/formula-data/internal/dal"
	mock "github.com/stretchr/testify/mock"
)

// MockQuerier is an autogenerated mock type for the Querier type
type MockQuerier struct {
	mock.Mock
}

type MockQuerier_Expecter struct {
	mock *mock.Mock
}

func (_m *MockQuerier) EXPECT() *MockQuerier_Expecter {
	return &MockQuerier_Expecter{mock: &_m.Mock}
}

// GetRaceById provides a mock function with given fields: ctx, id
func (_m *MockQuerier) GetRaceById(ctx context.Context, id int64) (dal.Race, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetRaceById")
	}

	var r0 dal.Race
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (dal.Race, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) dal.Race); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(dal.Race)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuerier_GetRaceById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRaceById'
type MockQuerier_GetRaceById_Call struct {
	*mock.Call
}

// GetRaceById is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *MockQuerier_Expecter) GetRaceById(ctx interface{}, id interface{}) *MockQuerier_GetRaceById_Call {
	return &MockQuerier_GetRaceById_Call{Call: _e.mock.On("GetRaceById", ctx, id)}
}

func (_c *MockQuerier_GetRaceById_Call) Run(run func(ctx context.Context, id int64)) *MockQuerier_GetRaceById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockQuerier_GetRaceById_Call) Return(_a0 dal.Race, _a1 error) *MockQuerier_GetRaceById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuerier_GetRaceById_Call) RunAndReturn(run func(context.Context, int64) (dal.Race, error)) *MockQuerier_GetRaceById_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockQuerier creates a new instance of MockQuerier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockQuerier(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockQuerier {
	mock := &MockQuerier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
